<?php

if ( ! defined( 'ABSPATH' ) ) exit;

/* 
 * DO NOT EDIT THIS FILE - BAD THINGS WILL HAPPEN.
 * (unless you know what you are doing).
 *
 * All logic in this file adds the Collection, Iconset, and Icon custom post types
 * and supporting list item columns and metaboxes.
 */

/**
 * Adds the Collection custom post type.
 * @since 1.1.0
 */
function add_collections_post_type() {
    $scope = 'iconfinder-portfolio';
    $labels = array(
        'name'                => _x( 'Collections', 'Iconfinder Collections', $scope ),
        'singular_name'       => _x( 'Collection', 'Iconfinder Collection', $scope ),
        'menu_name'           => __( 'Iconfinder Collections', $scope ),
        'parent_item_colon'   => __( 'Parent Collection', $scope ),
        'all_items'           => __( 'Collections', $scope ),
        'view_item'           => __( 'View Collection', $scope ),
        'add_new_item'        => __( 'Add New Collection', $scope ),
        'add_new'             => __( 'Add New', $scope ),
        'edit_item'           => __( 'Edit Collection', $scope ),
        'update_item'         => __( 'Update Collection', $scope ),
        'search_items'        => __( 'Search Collection', $scope ),
        'not_found'           => __( 'Not Found', $scope ),
        'not_found_in_trash'  => __( 'Not found in Trash', $scope ),
    );

    $args = array(
        'label'               => __( 'iconfinder-collections', $scope ),
        'description'         => __( 'Iconfinder Collections', $scope ),
        'labels'              => $labels,
        'supports'            => array( 'title', 'editor', 'excerpt', 'author', 'thumbnail', 'comments', 'page-attributes' ),
        'taxonomies'          => array( 'icon_category', 'icon_tag' ),
        'hierarchical'        => false,
        'public'              => true,
        'show_ui'             => true,
        'show_in_menu'        => ICF_PLUGIN_NAME,
        'show_in_nav_menus'   => true,
        'show_in_admin_bar'   => true,
        'menu_position'       => 0,
        'can_export'          => true,
        'has_archive'         => true,
        'exclude_from_search' => false,
        'publicly_queryable'  => true,
        'capability_type'     => 'page',
    );
    register_post_type( 'collection', $args );   
}

/**
 * Adds the Iconset custom post type.
 * @since 1.1.0
 */
function add_iconsets_post_type() {
    $scope = 'iconfinder-portfolio';
    $labels = array(
        'name'                => _x( 'Iconsets', 'Iconfinder Iconsets', $scope ),
        'singular_name'       => _x( 'Iconset', 'Iconfinder Iconset', $scope ),
        'menu_name'           => __( 'Iconfinder Iconsets', $scope ),
        'parent_item_colon'   => __( 'Parent Collection', $scope ),
        'all_items'           => __( 'Iconsets', $scope ),
        'view_item'           => __( 'View Iconset', $scope ),
        'add_new_item'        => __( 'Add New Iconset', $scope ),
        'add_new'             => __( 'Add New', $scope ),
        'edit_item'           => __( 'Edit Iconset', $scope ),
        'update_item'         => __( 'Update Iconset', $scope ),
        'search_items'        => __( 'Search Iconset', $scope ),
        'not_found'           => __( 'Not Found', $scope ),
        'not_found_in_trash'  => __( 'Not found in Trash', $scope ),
    );

    $args = array(
        'label'               => __( 'iconfinder-iconsets', $scope ),
        'description'         => __( 'Iconfinder Iconsets', $scope ),
        'labels'              => $labels,
        'supports'            => array( 'title', 'editor', 'excerpt', 'thumbnail', 'custom-fields', 'page-attributes' ),
        'taxonomies'          => array( 'icon_category', 'icon_tag' ),
        'hierarchical'        => false,
        'public'              => true,
        'show_ui'             => true,
        'show_in_menu'        => ICF_PLUGIN_NAME,
        'show_in_nav_menus'   => true,
        'show_in_admin_bar'   => true,
        'menu_position'       => 1,
        'can_export'          => true,
        'has_archive'         => true,
        'exclude_from_search' => false,
        'publicly_queryable'  => true,
        'capability_type'     => 'page',
    );
    register_post_type( 'iconset', $args );
}
  
/**
 * Adds the Icon custom post type.
 * @sincer 1.1.0
 */
function add_icons_post_type() {
    $scope = 'iconfinder-portfolio';
    $labels = array(
        'name'                => _x( 'Icons', 'Iconfinder Icons', $scope ),
        'singular_name'       => _x( 'Icon', 'Iconfinder Icon', $scope ),
        'menu_name'           => __( 'Iconfinder Icons', $scope ),
        'parent_item_colon'   => __( 'Parent Iconset', $scope ),
        'all_items'           => __( 'Icons', $scope ),
        'view_item'           => __( 'View Icon', $scope ),
        'add_new_item'        => __( 'Add New Icon', $scope ),
        'add_new'             => __( 'Add New', $scope ),
        'edit_item'           => __( 'Edit Icon', $scope ),
        'update_item'         => __( 'Update Icon', $scope ),
        'search_items'        => __( 'Search Icon', $scope ),
        'not_found'           => __( 'Not Found', $scope ),
        'not_found_in_trash'  => __( 'Not found in Trash', $scope ),
    );

    $args = array(
        'label'               => __( 'iconfinder-icons', $scope ),
        'description'         => __( 'Iconfinder Icons', $scope ),
        'labels'              => $labels,
        'supports'            => array( 'title', 'editor', 'excerpt', 'thumbnail', 'custom-fields', 'page-attributes' ),
        'taxonomies'          => array( 'icon_category', 'icon_tag' ),
        'hierarchical'        => false,
        'public'              => true,
        'show_ui'             => true,
        'show_in_menu'        => ICF_PLUGIN_NAME,
        'show_in_nav_menus'   => true,
        'show_in_admin_bar'   => true,
        'menu_position'       => 2,
        'can_export'          => true,
        'has_archive'         => true,
        'exclude_from_search' => false,
        'publicly_queryable'  => true,
        'capability_type'     => 'page',
    );
    register_post_type( 'icon', $args );
}

/**
 * Register the custom taxonomies.
 */
function register_icon_taxonomies() {
    // Register the icon categories taxonomy
    register_taxonomy(
        'icon_category',
        array('icon', 'iconset', 'collection'),
        array(
            'label' => __( 'Iconfinder Categories' ),
            'rewrite' => array( 'slug' => 'icon-category' ),
            'capabilities' => array(
                'manage_terms' => 'manage_custom_tax',
                'edit_terms'   => 'manage_custom_tax',
                'delete_terms' => 'manage_custom_tax',
                'assign_terms' => 'edit_posts'
            ),
            'show_ui' => true,
            'show_in_menu' => true,
            'hierarchical' => true,
            'show_admin_column' => true,
            'publicly_queryable' => true
        )
    );
    // Register the icon tags taxonomy
    register_taxonomy(
        'icon_tag',
        array('icon', 'iconset', 'collection'),
        array(
            'label' => __( 'Iconfinder Tags' ),
            'rewrite' => array( 'slug' => 'icon-tags' ),
            'capabilities' => array(
                'manage_terms' => 'manage_custom_tax',
                'edit_terms'   => 'manage_custom_tax',
                'delete_terms' => 'manage_custom_tax',
                'assign_terms' => 'edit_posts'
            ),
            'show_ui' => true,
            'show_in_menu' => true,
            'show_admin_column' => true,
            'publicly_queryable' => true
        )
    );
}
add_action( 'init', 'register_icon_taxonomies' );


/**
 * @param array $columns The array of column names.
 * @return mixed
 *
 * @see https://code.tutsplus.com/articles/quick-tip-make-your-custom-column-sortable--wp-25095
 */
function icf_columns_head($columns) {

    $columns['preview'] = 'Preview';
    $columns['iconset_style'] = 'Style';
    $columns['iconset_identifier'] = 'Identifier';
    $columns['iconset_id'] = 'Iconset ID';
    $columns['iconset_icons_count'] = 'Icons Count';
    $columns['iconset_is_premium'] = 'License Type';
    if ( isset($columns['taxonomy-icon_tag']) ) {
        unset($columns['taxonomy-icon_tag']);
    }
    return $columns;
}

/**
 * @param $column_name
 * @param $post_id
 */
function icf_columns_content($column_name, $post_id) {

    if ($column_name == 'preview') {
        if ($preview = get_post_meta( $post_id, 'preview_image_medium', true )) {
            echo "<img src=\"{$preview}\" width=\"192\" />";
        }
    }
    if ($column_name == 'iconset_style') {
        echo get_post_meta($post_id, 'iconset_style_name', true);
    }
    if ($column_name == 'iconset_icons_count') {
        echo get_post_meta($post_id, 'icons_count', true);
    }
    if ($column_name == 'iconset_is_premium') {
        $is_premium = get_post_meta($post_id, 'is_premium', true);
        echo is_true($is_premium) ? 'Premium' : 'Free' ;
    }
    if ($column_name == 'iconset_identifier') {
        $link = get_post_meta($post_id, 'guid', true);
        $text = get_post_meta($post_id, 'iconset_identifier', true);
        echo "<a href=\"{$link}\" target=\"_blank\">{$text}</a>";
    }
    if ($column_name == 'iconset_id') {
        $link = get_post_meta($post_id, 'guid', true);
        $text = get_post_meta($post_id, 'iconset_id', true);
        echo "<a href=\"{$link}\" target=\"_blank\">{$text}</a>";
    }
}

/**
 * @param $columns
 * @return mixed
 */
function iconset_sortable_columns( $columns ) {
    $columns['iconset_style'] = 'style';
    $columns['iconset_identifier'] = 'identifier';
    $columns['iconset_id'] = 'iconset_id';
    $columns['iconset_icons_count'] = 'icons_count';
    $columns['iconset_is_premium'] = 'is_premium';
    return $columns;
}

/**
 * @param \WP_Query $query
 */
function iconset_orderby( $query ) {

    if ( ! is_admin() ) { return; }

    $orderby = $query->get( 'orderby');

    if ( 'style' == $orderby ) {
        $query->set('meta_key','iconset_style_name');
        $query->set('orderby', 'meta_value');
    }
    if ( 'identifier' == $orderby ) {
        $query->set('meta_key','iconset_identifier');
        $query->set('orderby', 'meta_value');
    }
    if ( 'iconset_id' == $orderby ) {
        $query->set('meta_key','iconset_id');
        $query->set('orderby', 'meta_value');
    }
    if ( 'icons_count' == $orderby ) {
        $query->set('meta_key','icons_count');
        $query->set('orderby', 'meta_value_num');
    }
    if ( 'is_premium' == $orderby ) {
        $query->set('meta_key','is_premium');
        $query->set('orderby', 'meta_value');
    }
}

add_filter( 'manage_iconset_posts_columns', 'icf_columns_head' );
add_action( 'manage_iconset_posts_custom_column', 'icf_columns_content', 10, 2 );
add_filter( 'manage_edit-iconset_sortable_columns', 'iconset_sortable_columns' );
add_action( 'pre_get_posts', 'iconset_orderby' );

/**
 * Make columns sortable.
 * @param array $defaults
 *
 * @return mixed
 *
 * @see https://code.tutsplus.com/articles/quick-tip-make-your-custom-column-sortable--wp-25095
 */
function icf_icon_columns_head( $columns ) {

    unset($columns['date']);

    $columns['preview'] = 'Preview';
    $columns['iconset_identifier'] = 'Identifier';
    $columns['iconset_id'] = 'Iconset ID';
    $columns['iconset_is_premium'] = 'License';

    return $columns;
}

/**
 * Add out custom columns content.
 * @param string $column_name
 * @param int $post_id
 */
function icf_icon_columns_content($column_name, $post_id) {

    if ($column_name == 'iconset_is_premium') {
        $is_premium = get_post_meta($post_id, 'is_premium', true);
        echo is_true($is_premium) ? 'Premium' : 'Free' ;
    }
    if ($column_name == 'iconset_identifier') {
        $link = get_post_meta($post_id, 'guid', true);
        $text = get_post_meta($post_id, 'iconset_identifier', true);
        echo "<a href=\"{$link}\" target=\"_blank\">{$text}</a>";
    }
    if ($column_name == 'iconset_id') {
        $link = get_post_meta($post_id, 'guid', true);
        $text = get_post_meta($post_id, 'iconset_id', true);
        echo "<a href=\"{$link}\" target=\"_blank\">{$text}</a>";
    }
    if ($column_name == 'preview') {
        if ($preview = get_post_meta( $post_id, 'preview_image_@128', true )) {
            echo "<img src=\"{$preview}\" width=\"64\" />";
        }
    }
}

/**
 * Make the icon list table sortable.
 * @param $columns
 *
 * @return mixed
 */
function icon_sortable_columns( $columns ) {

    $columns['iconset_identifier'] = 'identifier';
    $columns['iconset_id']         = 'iconset_id';
    $columns['iconset_is_premium'] = 'is_premium';
    return $columns;
}

/**
 * @param \WP_Query $query
 */
function icon_orderby( $query ) {

    if( ! is_admin() )
        return;

    $orderby = $query->get( 'orderby');

    if ( 'identifier' == $orderby ) {
        $query->set('meta_key','iconset_identifier');
        $query->set('orderby', 'meta_value');
    }
    if ( 'iconset_id' == $orderby ) {
        $query->set('meta_key','iconset_id');
        $query->set('orderby', 'meta_value');
    }
    if ( 'is_premium' == $orderby ) {
        $query->set('meta_key','is_premium');
        $query->set('orderby', 'meta_value');
    }
}

add_filter( 'manage_icon_posts_columns', 'icf_icon_columns_head' );
add_action( 'manage_icon_posts_custom_column', 'icf_icon_columns_content', 10, 2 );
add_filter( 'manage_edit-icon_sortable_columns', 'icon_sortable_columns' );
add_action( 'pre_get_posts', 'icon_orderby' );



/**
 * Add the different metabox actions.
 */
function add_iconfinder_meta_boxes() {

    add_meta_box( 'collections_metabox', 'Iconsets', 'show_collections_metabox', 'collection', 'side', 'high');
    add_meta_box( 'iconsets_metabox', 'Collection', 'show_iconsets_metabox', 'iconset', 'side', 'high' );
    add_meta_box( 'icons_metabox', 'Iconset', 'show_icons_metabox', 'icon', 'side', 'high' );
}
add_action( 'add_meta_boxes', 'add_iconfinder_meta_boxes' );

/**
 * Show the collections metabox on the edit post page.
 * @param object $post
 *
 * @since 1.1.0
 */
function show_collections_metabox($post) {

    // TODO: Add collections metabox data.
}

/**
 * Show the iconsets metabox on the edit post page.
 * @param object $post
 *
 * @since 1.1.0
 */
function show_iconsets_metabox($post) {

    $iconset_id = get_post_meta( $post->ID, 'iconset_id', true );
    $iconset_identifier = get_post_meta( $post->ID, 'iconset_identifier', true );
    $latest_sync = get_post_meta( $post->ID, 'latest_sync', true );
    $icons_count = get_post_meta( $post->ID, 'icons_count', true );
    if (! empty($iconset_id)) {
        echo "<p><strong>Iconset:</strong> {$iconset_identifier} (ID: {$iconset_id})</p>";
        echo "<p><strong>Icons Count:</strong> {$icons_count}</p>";
        echo "<p><a href=\"https://www.iconfinder.com/iconsets/{$iconset_id}\" target=\"_blank\">View on Iconfinder</a></p>";
        echo "<p><strong>Last Sync:</strong> $latest_sync</p>";
        $preview = get_post_meta( $post->ID, 'preview_image_medium', true );
        if (! empty($preview)) {
            echo "<p><a href=\"https://www.iconfinder.com/iconsets/{$iconset_id}\" target=\"_blank\">";
            echo "<img src=\"{$preview}\" width=\"250\" />";
            echo "</a></p>\n";
        }
    }
    else {
        //TODO: Show default message
    }
}

/**
 * Show the icons metabox on the edit post page.
 * @param object $post
 *
 * @since 1.1.0
 */
function show_icons_metabox($post) {

    $icon_id    = get_post_meta( $post->ID, 'icon_id', true );
    $iconset_id = get_post_meta( $post->ID, 'iconset_id', true );
    $iconset_identifier = get_post_meta( $post->ID, 'iconset_identifier', true );
    $latest_sync = get_post_meta( $post->ID, 'latest_sync', true );
    if (! empty($iconset_id)) {
        echo "<p><strong>Iconset:</strong> <a href=\"https://www.iconfinder.com/iconsets/{$iconset_id}\" target=\"_blank\">{$iconset_identifier}</a></p>";

        $preview = get_post_meta( $post->post_parent, 'preview_image_medium', true );
        if (! empty($preview)) {
            echo "<p><a href=\"https://www.iconfinder.com/iconsets/{$iconset_id}\" target=\"_blank\">";
            echo "<img src=\"{$preview}\" width=\"250\" />";
            echo "</a></p>\n";
        }
    }
    if (! empty($icon_id)) {
        echo "<p><strong>Icon ID: </strong><a href=\"" . ICONFINDER_LINK_ICONS . "{$icon_id}\" target=\"_blank\">{$icon_id}</a></p>";
        $preview = get_post_meta( $post->ID, 'preview_image_@256', true );
        if (! empty($preview)) {
            echo "<p><a href=\"" . ICONFINDER_LINK_ICONS . "{$icon_id}\" target=\"_blank\">";
            echo "<img src=\"{$preview}\" width=\"250\" />";
            echo "</a></p>\n";
        }
    }
    echo "<p><strong>" . __('Last Sync:', ICF_PLUGIN_NAME) . "</strong> {$latest_sync}</p>";
}

/**
 * Move the featured image to the top of the column on Iconset and Icon posts.
 */
function move_featured_image_metabox(){
    /**
     * Move Iconset featured image.
     */
    remove_meta_box( 'postimagediv', 'iconset', 'side' );
    add_meta_box('postimagediv', __('Iconset Preview'), 'post_thumbnail_meta_box', 'iconset', 'side', 'high');

    /**
     * Move Icon featured image.
     */
    remove_meta_box( 'postimagediv', 'icon', 'side' );
    add_meta_box('postimagediv', __('Icon Preview'), 'post_thumbnail_meta_box', 'icon', 'side', 'high');
}
add_action( 'do_meta_boxes', 'move_featured_image_metabox' );